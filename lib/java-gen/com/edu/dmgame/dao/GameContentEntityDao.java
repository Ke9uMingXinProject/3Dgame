package com.edu.dmgame.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.edu.dmgame.entities.GameContentEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GAME_CONTENT_ENTITY".
*/
public class GameContentEntityDao extends AbstractDao<GameContentEntity, Long> {

    public static final String TABLENAME = "GAME_CONTENT_ENTITY";

    /**
     * Properties of entity GameContentEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Pubdate = new Property(2, String.class, "pubdate", false, "PUBDATE");
        public final static Property Senddate = new Property(3, String.class, "senddate", false, "SENDDATE");
        public final static Property Shorttitle = new Property(4, String.class, "shorttitle", false, "SHORTTITLE");
        public final static Property Typeid = new Property(5, String.class, "typeid", false, "TYPEID");
        public final static Property Writer = new Property(6, String.class, "writer", false, "WRITER");
        public final static Property Source = new Property(7, String.class, "source", false, "SOURCE");
        public final static Property Litpic = new Property(8, String.class, "litpic", false, "LITPIC");
        public final static Property Feedback = new Property(9, String.class, "feedback", false, "FEEDBACK");
        public final static Property Click = new Property(10, String.class, "click", false, "CLICK");
        public final static Property Description = new Property(11, String.class, "description", false, "DESCRIPTION");
        public final static Property Typename = new Property(12, String.class, "typename", false, "TYPENAME");
        public final static Property Arcurl = new Property(13, String.class, "arcurl", false, "ARCURL");
        public final static Property Body = new Property(14, String.class, "body", false, "BODY");
        public final static Property Game_trans_name = new Property(15, String.class, "game_trans_name", false, "GAME_TRANS_NAME");
        public final static Property Release_date = new Property(16, String.class, "release_date", false, "RELEASE_DATE");
        public final static Property Language = new Property(17, String.class, "language", false, "LANGUAGE");
        public final static Property Terrace = new Property(18, String.class, "terrace", false, "TERRACE");
        public final static Property Made_company = new Property(19, String.class, "made_company", false, "MADE_COMPANY");
        public final static Property Release_company = new Property(20, String.class, "release_company", false, "RELEASE_COMPANY");
        public final static Property Websit = new Property(21, String.class, "websit", false, "WEBSIT");
        public final static Property Gameplay = new Property(22, String.class, "gameplay", false, "GAMEPLAY");
        public final static Property Graphics = new Property(23, String.class, "graphics", false, "GRAPHICS");
        public final static Property Sound = new Property(24, String.class, "sound", false, "SOUND");
        public final static Property Concept = new Property(25, String.class, "concept", false, "CONCEPT");
        public final static Property Multiplayer = new Property(26, String.class, "multiplayer", false, "MULTIPLAYER");
        public final static Property Total = new Property(27, String.class, "total", false, "TOTAL");
        public final static Property Game_info = new Property(28, String.class, "game_info", false, "GAME_INFO");
        public final static Property System = new Property(29, String.class, "system", false, "SYSTEM");
        public final static Property System1 = new Property(30, String.class, "system1", false, "SYSTEM1");
        public final static Property Game_bbs = new Property(31, String.class, "game_bbs", false, "GAME_BBS");
        public final static Property Game_othername1 = new Property(32, String.class, "game_othername1", false, "GAME_OTHERNAME1");
        public final static Property Game_othername2 = new Property(33, String.class, "game_othername2", false, "GAME_OTHERNAME2");
    };


    public GameContentEntityDao(DaoConfig config) {
        super(config);
    }
    
    public GameContentEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GAME_CONTENT_ENTITY\" (" + //
                "\"id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"PUBDATE\" TEXT," + // 2: pubdate
                "\"SENDDATE\" TEXT," + // 3: senddate
                "\"SHORTTITLE\" TEXT," + // 4: shorttitle
                "\"TYPEID\" TEXT," + // 5: typeid
                "\"WRITER\" TEXT," + // 6: writer
                "\"SOURCE\" TEXT," + // 7: source
                "\"LITPIC\" TEXT," + // 8: litpic
                "\"FEEDBACK\" TEXT," + // 9: feedback
                "\"CLICK\" TEXT," + // 10: click
                "\"DESCRIPTION\" TEXT," + // 11: description
                "\"TYPENAME\" TEXT," + // 12: typename
                "\"ARCURL\" TEXT," + // 13: arcurl
                "\"BODY\" TEXT," + // 14: body
                "\"GAME_TRANS_NAME\" TEXT," + // 15: game_trans_name
                "\"RELEASE_DATE\" TEXT," + // 16: release_date
                "\"LANGUAGE\" TEXT," + // 17: language
                "\"TERRACE\" TEXT," + // 18: terrace
                "\"MADE_COMPANY\" TEXT," + // 19: made_company
                "\"RELEASE_COMPANY\" TEXT," + // 20: release_company
                "\"WEBSIT\" TEXT," + // 21: websit
                "\"GAMEPLAY\" TEXT," + // 22: gameplay
                "\"GRAPHICS\" TEXT," + // 23: graphics
                "\"SOUND\" TEXT," + // 24: sound
                "\"CONCEPT\" TEXT," + // 25: concept
                "\"MULTIPLAYER\" TEXT," + // 26: multiplayer
                "\"TOTAL\" TEXT," + // 27: total
                "\"GAME_INFO\" TEXT," + // 28: game_info
                "\"SYSTEM\" TEXT," + // 29: system
                "\"SYSTEM1\" TEXT," + // 30: system1
                "\"GAME_BBS\" TEXT," + // 31: game_bbs
                "\"GAME_OTHERNAME1\" TEXT," + // 32: game_othername1
                "\"GAME_OTHERNAME2\" TEXT);"); // 33: game_othername2
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GAME_CONTENT_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GameContentEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String pubdate = entity.getPubdate();
        if (pubdate != null) {
            stmt.bindString(3, pubdate);
        }
 
        String senddate = entity.getSenddate();
        if (senddate != null) {
            stmt.bindString(4, senddate);
        }
 
        String shorttitle = entity.getShorttitle();
        if (shorttitle != null) {
            stmt.bindString(5, shorttitle);
        }
 
        String typeid = entity.getTypeid();
        if (typeid != null) {
            stmt.bindString(6, typeid);
        }
 
        String writer = entity.getWriter();
        if (writer != null) {
            stmt.bindString(7, writer);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(8, source);
        }
 
        String litpic = entity.getLitpic();
        if (litpic != null) {
            stmt.bindString(9, litpic);
        }
 
        String feedback = entity.getFeedback();
        if (feedback != null) {
            stmt.bindString(10, feedback);
        }
 
        String click = entity.getClick();
        if (click != null) {
            stmt.bindString(11, click);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(12, description);
        }
 
        String typename = entity.getTypename();
        if (typename != null) {
            stmt.bindString(13, typename);
        }
 
        String arcurl = entity.getArcurl();
        if (arcurl != null) {
            stmt.bindString(14, arcurl);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(15, body);
        }
 
        String game_trans_name = entity.getGame_trans_name();
        if (game_trans_name != null) {
            stmt.bindString(16, game_trans_name);
        }
 
        String release_date = entity.getRelease_date();
        if (release_date != null) {
            stmt.bindString(17, release_date);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(18, language);
        }
 
        String terrace = entity.getTerrace();
        if (terrace != null) {
            stmt.bindString(19, terrace);
        }
 
        String made_company = entity.getMade_company();
        if (made_company != null) {
            stmt.bindString(20, made_company);
        }
 
        String release_company = entity.getRelease_company();
        if (release_company != null) {
            stmt.bindString(21, release_company);
        }
 
        String websit = entity.getWebsit();
        if (websit != null) {
            stmt.bindString(22, websit);
        }
 
        String gameplay = entity.getGameplay();
        if (gameplay != null) {
            stmt.bindString(23, gameplay);
        }
 
        String graphics = entity.getGraphics();
        if (graphics != null) {
            stmt.bindString(24, graphics);
        }
 
        String sound = entity.getSound();
        if (sound != null) {
            stmt.bindString(25, sound);
        }
 
        String concept = entity.getConcept();
        if (concept != null) {
            stmt.bindString(26, concept);
        }
 
        String multiplayer = entity.getMultiplayer();
        if (multiplayer != null) {
            stmt.bindString(27, multiplayer);
        }
 
        String total = entity.getTotal();
        if (total != null) {
            stmt.bindString(28, total);
        }
 
        String game_info = entity.getGame_info();
        if (game_info != null) {
            stmt.bindString(29, game_info);
        }
 
        String system = entity.getSystem();
        if (system != null) {
            stmt.bindString(30, system);
        }
 
        String system1 = entity.getSystem1();
        if (system1 != null) {
            stmt.bindString(31, system1);
        }
 
        String game_bbs = entity.getGame_bbs();
        if (game_bbs != null) {
            stmt.bindString(32, game_bbs);
        }
 
        String game_othername1 = entity.getGame_othername1();
        if (game_othername1 != null) {
            stmt.bindString(33, game_othername1);
        }
 
        String game_othername2 = entity.getGame_othername2();
        if (game_othername2 != null) {
            stmt.bindString(34, game_othername2);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GameContentEntity readEntity(Cursor cursor, int offset) {
        GameContentEntity entity = new GameContentEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pubdate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // senddate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shorttitle
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // typeid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // writer
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // source
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // litpic
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // feedback
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // click
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // description
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // typename
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // arcurl
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // body
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // game_trans_name
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // release_date
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // language
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // terrace
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // made_company
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // release_company
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // websit
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // gameplay
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // graphics
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // sound
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // concept
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // multiplayer
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // total
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // game_info
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // system
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // system1
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // game_bbs
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // game_othername1
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33) // game_othername2
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GameContentEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPubdate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSenddate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShorttitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTypeid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWriter(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSource(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLitpic(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFeedback(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setClick(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDescription(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTypename(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setArcurl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBody(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setGame_trans_name(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRelease_date(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLanguage(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTerrace(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMade_company(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setRelease_company(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setWebsit(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setGameplay(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setGraphics(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setSound(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setConcept(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setMultiplayer(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setTotal(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setGame_info(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setSystem(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setSystem1(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setGame_bbs(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setGame_othername1(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setGame_othername2(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GameContentEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GameContentEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
