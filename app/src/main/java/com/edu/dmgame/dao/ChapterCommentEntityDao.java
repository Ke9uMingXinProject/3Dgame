package com.edu.dmgame.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.edu.dmgame.entities.ChapterCommentEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAPTER_COMMENT_ENTITY".
*/
public class ChapterCommentEntityDao extends AbstractDao<ChapterCommentEntity, Long> {

    public static final String TABLENAME = "CHAPTER_COMMENT_ENTITY";

    /**
     * Properties of entity ChapterCommentEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Aid = new Property(1, String.class, "aid", false, "AID");
        public final static Property Typeid = new Property(2, String.class, "typeid", false, "TYPEID");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property Ip = new Property(4, String.class, "ip", false, "IP");
        public final static Property Ip1 = new Property(5, String.class, "ip1", false, "IP1");
        public final static Property Ip2 = new Property(6, String.class, "ip2", false, "IP2");
        public final static Property Ischeck = new Property(7, String.class, "ischeck", false, "ISCHECK");
        public final static Property Dtime = new Property(8, String.class, "dtime", false, "DTIME");
        public final static Property Mid = new Property(9, String.class, "mid", false, "MID");
        public final static Property Bad = new Property(10, String.class, "bad", false, "BAD");
        public final static Property Good = new Property(11, String.class, "good", false, "GOOD");
        public final static Property Ftype = new Property(12, String.class, "ftype", false, "FTYPE");
        public final static Property Face = new Property(13, String.class, "face", false, "FACE");
        public final static Property Msg = new Property(14, String.class, "msg", false, "MSG");
        public final static Property Cid = new Property(15, String.class, "cid", false, "CID");
        public final static Property Reid = new Property(16, String.class, "reid", false, "REID");
        public final static Property Topid = new Property(17, String.class, "topid", false, "TOPID");
        public final static Property Floor = new Property(18, String.class, "floor", false, "FLOOR");
        public final static Property Reply = new Property(19, String.class, "reply", false, "REPLY");
    };


    public ChapterCommentEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ChapterCommentEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAPTER_COMMENT_ENTITY\" (" + //
                "\"id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"AID\" TEXT," + // 1: aid
                "\"TYPEID\" TEXT," + // 2: typeid
                "\"USERNAME\" TEXT," + // 3: username
                "\"IP\" TEXT," + // 4: ip
                "\"IP1\" TEXT," + // 5: ip1
                "\"IP2\" TEXT," + // 6: ip2
                "\"ISCHECK\" TEXT," + // 7: ischeck
                "\"DTIME\" TEXT," + // 8: dtime
                "\"MID\" TEXT," + // 9: mid
                "\"BAD\" TEXT," + // 10: bad
                "\"GOOD\" TEXT," + // 11: good
                "\"FTYPE\" TEXT," + // 12: ftype
                "\"FACE\" TEXT," + // 13: face
                "\"MSG\" TEXT," + // 14: msg
                "\"CID\" TEXT," + // 15: cid
                "\"REID\" TEXT," + // 16: reid
                "\"TOPID\" TEXT," + // 17: topid
                "\"FLOOR\" TEXT," + // 18: floor
                "\"REPLY\" TEXT);"); // 19: reply
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAPTER_COMMENT_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChapterCommentEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String aid = entity.getAid();
        if (aid != null) {
            stmt.bindString(2, aid);
        }
 
        String typeid = entity.getTypeid();
        if (typeid != null) {
            stmt.bindString(3, typeid);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(5, ip);
        }
 
        String ip1 = entity.getIp1();
        if (ip1 != null) {
            stmt.bindString(6, ip1);
        }
 
        String ip2 = entity.getIp2();
        if (ip2 != null) {
            stmt.bindString(7, ip2);
        }
 
        String ischeck = entity.getIscheck();
        if (ischeck != null) {
            stmt.bindString(8, ischeck);
        }
 
        String dtime = entity.getDtime();
        if (dtime != null) {
            stmt.bindString(9, dtime);
        }
 
        String mid = entity.getMid();
        if (mid != null) {
            stmt.bindString(10, mid);
        }
 
        String bad = entity.getBad();
        if (bad != null) {
            stmt.bindString(11, bad);
        }
 
        String good = entity.getGood();
        if (good != null) {
            stmt.bindString(12, good);
        }
 
        String ftype = entity.getFtype();
        if (ftype != null) {
            stmt.bindString(13, ftype);
        }
 
        String face = entity.getFace();
        if (face != null) {
            stmt.bindString(14, face);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(15, msg);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(16, cid);
        }
 
        String reid = entity.getReid();
        if (reid != null) {
            stmt.bindString(17, reid);
        }
 
        String topid = entity.getTopid();
        if (topid != null) {
            stmt.bindString(18, topid);
        }
 
        String floor = entity.getFloor();
        if (floor != null) {
            stmt.bindString(19, floor);
        }
 
        String reply = entity.getReply();
        if (reply != null) {
            stmt.bindString(20, reply);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChapterCommentEntity readEntity(Cursor cursor, int offset) {
        ChapterCommentEntity entity = new ChapterCommentEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // aid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // typeid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ip
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ip1
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ip2
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ischeck
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // dtime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // mid
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // bad
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // good
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ftype
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // face
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // msg
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // cid
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // reid
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // topid
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // floor
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // reply
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChapterCommentEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTypeid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIp1(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIp2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIscheck(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDtime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMid(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBad(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGood(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFtype(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFace(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMsg(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCid(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setReid(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTopid(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setFloor(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setReply(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChapterCommentEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChapterCommentEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
