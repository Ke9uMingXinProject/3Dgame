package com.edu.dmgame.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.edu.dmgame.entities.ChapterEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAPTER_ENTITY".
*/
public class ChapterEntityDao extends AbstractDao<ChapterEntity, Long> {

    public static final String TABLENAME = "CHAPTER_ENTITY";

    /**
     * Properties of entity ChapterEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Pubdate = new Property(2, String.class, "pubdate", false, "PUBDATE");
        public final static Property Senddate = new Property(3, String.class, "senddate", false, "SENDDATE");
        public final static Property Shorttitle = new Property(4, String.class, "shorttitle", false, "SHORTTITLE");
        public final static Property Typeid = new Property(5, String.class, "typeid", false, "TYPEID");
        public final static Property Writer = new Property(6, String.class, "writer", false, "WRITER");
        public final static Property Source = new Property(7, String.class, "source", false, "SOURCE");
        public final static Property Litpic = new Property(8, String.class, "litpic", false, "LITPIC");
        public final static Property Feedback = new Property(9, String.class, "feedback", false, "FEEDBACK");
        public final static Property Click = new Property(10, String.class, "click", false, "CLICK");
        public final static Property Description = new Property(11, String.class, "description", false, "DESCRIPTION");
        public final static Property Typename = new Property(12, String.class, "typename", false, "TYPENAME");
        public final static Property Arcurl = new Property(13, String.class, "arcurl", false, "ARCURL");
        public final static Property Body = new Property(14, String.class, "body", false, "BODY");
    };


    public ChapterEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ChapterEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAPTER_ENTITY\" (" + //
                "\"id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"PUBDATE\" TEXT," + // 2: pubdate
                "\"SENDDATE\" TEXT," + // 3: senddate
                "\"SHORTTITLE\" TEXT," + // 4: shorttitle
                "\"TYPEID\" TEXT," + // 5: typeid
                "\"WRITER\" TEXT," + // 6: writer
                "\"SOURCE\" TEXT," + // 7: source
                "\"LITPIC\" TEXT," + // 8: litpic
                "\"FEEDBACK\" TEXT," + // 9: feedback
                "\"CLICK\" TEXT," + // 10: click
                "\"DESCRIPTION\" TEXT," + // 11: description
                "\"TYPENAME\" TEXT," + // 12: typename
                "\"ARCURL\" TEXT," + // 13: arcurl
                "\"BODY\" TEXT);"); // 14: body
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAPTER_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChapterEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String pubdate = entity.getPubdate();
        if (pubdate != null) {
            stmt.bindString(3, pubdate);
        }
 
        String senddate = entity.getSenddate();
        if (senddate != null) {
            stmt.bindString(4, senddate);
        }
 
        String shorttitle = entity.getShorttitle();
        if (shorttitle != null) {
            stmt.bindString(5, shorttitle);
        }
 
        String typeid = entity.getTypeid();
        if (typeid != null) {
            stmt.bindString(6, typeid);
        }
 
        String writer = entity.getWriter();
        if (writer != null) {
            stmt.bindString(7, writer);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(8, source);
        }
 
        String litpic = entity.getLitpic();
        if (litpic != null) {
            stmt.bindString(9, litpic);
        }
 
        String feedback = entity.getFeedback();
        if (feedback != null) {
            stmt.bindString(10, feedback);
        }
 
        String click = entity.getClick();
        if (click != null) {
            stmt.bindString(11, click);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(12, description);
        }
 
        String typename = entity.getTypename();
        if (typename != null) {
            stmt.bindString(13, typename);
        }
 
        String arcurl = entity.getArcurl();
        if (arcurl != null) {
            stmt.bindString(14, arcurl);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(15, body);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChapterEntity readEntity(Cursor cursor, int offset) {
        ChapterEntity entity = new ChapterEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pubdate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // senddate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shorttitle
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // typeid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // writer
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // source
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // litpic
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // feedback
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // click
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // description
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // typename
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // arcurl
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // body
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChapterEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPubdate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSenddate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShorttitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTypeid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWriter(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSource(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLitpic(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFeedback(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setClick(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDescription(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTypename(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setArcurl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBody(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChapterEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChapterEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
